{
	"name": "DF_S58_Date_Validations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_S58_Input",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_S58_Output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_S58_Output",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Credit_ID as integer,",
				"          Credit_Type as string,",
				"          Credit_Name as string,",
				"          Credit_Score as integer,",
				"          EMI_Start_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"derivedColumn1 split(case(isNull(toDate(EMI_Start_Date,'yyyy-MM-dd')),false(),true()),",
				"     disjoint: false) ~> split1@(GoodRecords, BadRecods)",
				"source1 derive(Load_Date = currentDate('UTC')) ~> derivedColumn1",
				"split1@GoodRecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['GoodRecods.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@BadRecods sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['BadRecods.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}