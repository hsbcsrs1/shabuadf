{
	"name": "DF_S56_Performance_Metrics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_S56_Schema_CSV",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_S56_Sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_S56_Sink",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     df_param_credit_Score as integer,",
				"     df_param_toppers_file_name as string,",
				"     df_param_all_cust_File_name as string",
				"}",
				"source(output(",
				"          Credit_ID as short,",
				"          Credit_Type as string,",
				"          Credit_Name as string,",
				"          Credit_Score as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(greaterOrEqual(Credit_Score,$df_param_credit_Score),",
				"     disjoint: true) ~> split1@(ScorePass, AllCust)",
				"split1@ScorePass sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($df_param_toppers_file_name)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@AllCust sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($df_param_all_cust_File_name)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}